Snapshots código Max --> https://github.com/academind/react-complete-guide-code/tree/03-react-basics-working-with-components/code

Crear una aplicación de React --> npx create-react-app [nombre]
								  cd [nombre]
								  npm start
								  
Iniciar una aplicación de React --> npm start, inicializa el server de desarrollo en local

Instalar paquetes necesarios para una app de React --> npm install (dentro carpeta con plantilla React,
si se ha usado el npx create-react-app normalmente no se deberá usar este comando)

----------------------------------------------------------------------------------------------------------
Funcionamiento y comportamiento React


La carpeta node_module contiene todas las dependencias y librearias de terceros, usualmente
no se deberá modificar. Las dependencias también se pueden ver en el package.json.

Donde trabajaremos será en la carpeta src. React es básicamente código JavaScript.

En src, index.js es el primer archivo que se ejecuta cuando se incializa la app. En este archivo
ocurren varias transformaciones antes de ser ejecutado en el buscador que facilitan su lectura
y su manejo.

Los componente se fundamentan en su reusabilidad y la límpia distribución de código

En react, es recomendable crear una carpeta para almacenar todos los componentes. Básicamente funciona como un gran
conjunto de ficheros que se interelacionan entre sí en una especie de arbol. El componente principal es <App />, del cual
derivarán el resto de componentes, solo <App /> será renderizado mientras que el resto de componentes
derivarán de él.

En react, al crear un componente lo normal es empezar con la primera letra en mayúscula.

I M P O R T A N T E
	En React, un componente es únicamente una función de JavaScript. Su contenido tiene apariencia de
	ser html normal, pero en realidad es JSX, una forma de código JS que se asemeja a HTML y facilita
	su manejo.
I M P O R T A N T E

Un componente de React debe ser siempre exportado e importado a otro fichero (usualmente a <App />).

Exportación: export default ExpenseItem;
importación: import ExpenseItem from "./components/ExpenseItem";

Una vez importado al componente principal <App />, se pondrá como si fuera una etiqueta html y renderizará
el contenido dentro de este componente.

Cuando indicamos el return, únicamente puede haber un solo parámetro. Para ello, podríamos englobarlo
todo dentro de un único div y es muy recomendable englobarlo todo dentro de paréntesis.

I M P O R T A N T E
	El auto formato para hacer legible el código es SHIFT + ALT + F
I M P O R T A N T E

----------------------------------------------------------------------------------------------------------
CSS y React


El archivo CSS de un componente suele llamarse igual que el componente que hace referencia y se pondrá 
junto a él. Este archivo CSS, al igual que los componentes, se deberá importar al archivo que hace referencia:
import './ExpenseItem.css';

Para establecer una clase usaremos className ya que, al ser fundamentalmente código JS vitaminado el componente,
la palabra class es una palabra reservada.
<div className="expense-item">

----------------------------------------------------------------------------------------------------------
Variables


Para introducir variables dentro de un componente usaremos únicamente {} sin añadir el $ como en JS ni los
backticks.
 
<h2>{variable}</h2>

Dentro de los {} se podrán realizar operaciones básicas y demás de JS.

----------------------------------------------------------------------------------------------------------
Recibir Datos


A la hora de recibir datos, se pondrán en el componente principal <App /> y se añadirán a los componentes
a los que hacen referencia: 

<ExpenseItem
        title={expenses[0].title}
        amount={expenses[0].amount}
        date={expenses[0].date}
		>
</ExpenseItem>

En el componente donde serán recibidos estos datos, ponemos como parámetro de la función "props" por convención
y seguidament lo marcamos así en el JSX: 
<h2>{props.title}</h2>.

Es muy recomendable poner toda la lógica de negocio del componente FUERA del return y dejar el return lo más
sencillo posible.


.toLocaleString() -->  devuelve un cadena con la representación al idioma de la fecha especificada,
					  muy interesante para poner fechas de diferentes formas en JS y con muchas 0pciones.
					  const month = props.date.toLocaleString('en-US', {month : 'long'});